package com.panduka.ncms.helpers;

import com.panduka.ncms.dto.HospitalDTO;
import com.panduka.ncms.dto.PatientDTO;
import com.panduka.ncms.dto.UserDTO;
import com.panduka.ncms.dto.impl.HospitalDTOImpl;
import com.panduka.ncms.dto.impl.PatientDTOImpl;
import com.panduka.ncms.dto.impl.UserDTOImpl;
import com.panduka.ncms.entity.Hospital;
import com.panduka.ncms.entity.Patient;
import com.panduka.ncms.entity.PatientQueue;
import com.panduka.ncms.entity.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Mapper {
    public  static Object convertToEntityObject(Object dto) {

        if( dto instanceof HospitalDTOImpl){
            Hospital hospitalEntity = new Hospital();
            HospitalDTO hospitalDTO = (HospitalDTO) dto;

            hospitalEntity.setName( hospitalDTO.getName());
            hospitalEntity.setLocationY( hospitalDTO.getY());
            hospitalEntity.setLocationX( hospitalDTO.getX());
            hospitalEntity.setChiefDoctor((User) Mapper.convertToEntityObject( hospitalDTO.getChiefDoctor()));
            hospitalEntity.setAvailBeds( hospitalDTO.getNoOfBeds() );

            //id is generated by the hibernate itself
            //build date is only needed when creating the hospital

            return hospitalEntity;
        }
        if( dto instanceof PatientDTOImpl){

        }
        if( dto instanceof UserDTOImpl){

        }
        if( dto instanceof PatientDTOImpl){

        }

        return null;
    }

    public static Object convertToDTO(Object entity) {

        if( entity instanceof Hospital){
            HospitalDTO hospitalDTO = new HospitalDTOImpl();
            Hospital hospitalEntity = (Hospital) entity;

            List<PatientDTO> patientListDTO= new ArrayList<>();
            //need to come up with another way to convert patientEntity list to patientDTOList
            if( hospitalEntity.getPatientList() != null){
                System.out.println( "patients are found");
                for( Patient p: hospitalEntity.getPatientList()){
                    if( !(p instanceof PatientDTO)){
                        PatientDTO patientDTO = (PatientDTO) Mapper.convertToDTO( p);
                        patientListDTO.add( patientDTO);
                    }

                }
            }

            hospitalDTO.setId( hospitalEntity.getId());
            hospitalDTO.setName( hospitalEntity.getName());
            hospitalDTO.setDistrictName( hospitalEntity.getDistrict());
            hospitalDTO.setX( hospitalEntity.getLocationX());
            hospitalDTO.setY( hospitalEntity.getLocationY());
            hospitalDTO.setNoOfBeds( hospitalEntity.getAvailBeds());
            hospitalDTO.setPatients( patientListDTO);
            hospitalDTO.setChiefDoctor( (UserDTO) Mapper.convertToDTO( hospitalEntity.getChiefDoctor()));

            return hospitalDTO;
        }
        if( entity instanceof User){
            UserDTO userDTO = new UserDTOImpl();
            User userEntity = ( User) entity;

            userDTO.setId( userEntity.getId());
            userDTO.setFirstName( userEntity.getFirstName());
            userDTO.setLastName( userEntity.getLastName());
            //userDTO.setPassword();
            //userDTO.setUsername();
            userDTO.setRole( userEntity.getRole());

            return userDTO;
        }
        if( entity instanceof Patient){
            PatientDTO patientDTO = new PatientDTOImpl();
            Patient patient = ( Patient) entity;

            patientDTO.setId( patient.getId());
            patientDTO.setAdmitDate( patient.getAdmitDate());
            patientDTO.setAge( patient.getAge());
            patientDTO.setBedNo( patient.getBedNo());
            patientDTO.setDischargedDate( patient.getDischargedDate());
            patientDTO.setDistrict( patient.getDistrict());
            patientDTO.setEmail( patient.getEmail());
            patientDTO.setGender( patient.getGender());
            patientDTO.setLocationX( patient.getLocationX());
            patientDTO.setLocationY( patient.getLocationY());
            patientDTO.setSeverityLevel( patient.getSeverityLevel());

            patientDTO.setAdmittedBy( (UserDTO) Mapper.convertToDTO( patient.getAdmittedBy()));
            patientDTO.setDischargedBy( (UserDTO) Mapper.convertToDTO( patient.getDischargedBy()));
            patientDTO.setHospital( (HospitalDTO) Mapper.convertToDTO( patient.getHospital()));
            //patientDTO.setPatientQueue( (PatientDTO) Mapper.convertToDTO( patient.getPatientQueue()));

            return patientDTO;

        }
        if( entity instanceof PatientQueue){

        }


        return null;
    }

}
